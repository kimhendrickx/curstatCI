// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ComputeConfIntervals
List ComputeConfIntervals(DataFrame data, NumericVector x, double alpha);
RcppExport SEXP curstatCI_ComputeConfIntervals(SEXP dataSEXP, SEXP xSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeConfIntervals(data, x, alpha));
    return rcpp_result_gen;
END_RCPP
}
// ComputeMLE
DataFrame ComputeMLE(DataFrame data);
RcppExport SEXP curstatCI_ComputeMLE(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeMLE(data));
    return rcpp_result_gen;
END_RCPP
}
// ComputeSMLE
NumericVector ComputeSMLE(DataFrame data, NumericVector x, double h);
RcppExport SEXP curstatCI_ComputeSMLE(SEXP dataSEXP, SEXP xSEXP, SEXP hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type data(dataSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type h(hSEXP);
    rcpp_result_gen = Rcpp::wrap(ComputeSMLE(data, x, h));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"curstatCI_ComputeConfIntervals", (DL_FUNC) &curstatCI_ComputeConfIntervals, 3},
    {"curstatCI_ComputeMLE", (DL_FUNC) &curstatCI_ComputeMLE, 1},
    {"curstatCI_ComputeSMLE", (DL_FUNC) &curstatCI_ComputeSMLE, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_curstatCI(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
